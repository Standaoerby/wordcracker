import os
import requests
from tqdm import tqdm
import re
import time
import random
from pathlib import Path

# –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥–∏
SAVE_PATH = "/media/standa/books"
LOG_PATH = os.path.join(SAVE_PATH, "download_log.txt")
os.makedirs(SAVE_PATH, exist_ok=True)

# –ë–∞–∑–æ–≤—ã–π URL API Gutendex (–∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –∫–Ω–∏–≥–∏)
BASE_API = "https://gutendex.com/books?languages=en"

def sanitize_filename(title: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return re.sub(r'[\\/*?:"<>|]', "_", title)

def get_epub_url(formats: dict) -> str | None:
    """–ò—â–µ—Ç .epub —Å—Å—ã–ª–∫—É (—Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ—Ç–æ–º –ª—é–±—É—é)"""
    for k, v in formats.items():
        if k == "application/epub+zip" and "images" not in k:
            return v
    for k, v in formats.items():
        if k == "application/epub+zip":
            return v
    return None

def was_downloaded(book_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª –ø–æ –ª–æ–≥—É"""
    if not os.path.exists(LOG_PATH):
        return False
    with open(LOG_PATH, "r", encoding="utf-8") as log:
        return str(book_id) in log.read()

def log_download(book_id: int, title: str):
    with open(LOG_PATH, "a", encoding="utf-8") as log:
        log.write(f"{book_id}\t{title}\n")

def download_book(book_id: int, title: str, url: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω epub"""
    filename = f"{book_id} - {sanitize_filename(title)}.epub"
    full_path = os.path.join(SAVE_PATH, filename)
    print(f"\n‚è≥ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {full_path}")

    if os.path.exists(full_path) or was_downloaded(book_id):
        print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ —Å–∫–∞—á–∞–Ω–æ)")
        return

    try:
        r = requests.get(url, timeout=20)
        print(f"üì° HTTP {r.status_code} ‚Äî {url}")

        if r.status_code == 200 and r.content[:4] == b"PK\x03\x04":
            with open(full_path, "wb") as f:
                f.write(r.content)
            log_download(book_id, title)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏: {full_path}")
        else:
            print(f"‚ö†Ô∏è {book_id}: –Ω–µ EPUB-—Ñ–∞–π–ª –∏–ª–∏ –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç")
    except Exception as e:
        print(f"‚ùå {book_id}: –æ—à–∏–±–∫–∞ ‚Äî {e}")

def main():
    print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ EPUB –∫–Ω–∏–≥–∏ –≤: {SAVE_PATH}")
    next_url = BASE_API
    total = 0
    session = requests.Session()

    while next_url:
        try:
            r = session.get(next_url, timeout=30)
            r.raise_for_status()
            data = r.json()
            books = data.get("results", [])

            for book in tqdm(books, desc="‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥"):
                book_id = book.get("id")
                title = book.get("title")
                formats = book.get("formats")
                if not book_id or not title or not formats:
                    continue

                print(f"\nüìò {book_id} ‚Äî {title}")
                print("üîç –§–æ—Ä–º–∞—Ç—ã:", list(formats.keys()))

                url = get_epub_url(formats)
                if url:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω .epub: {url}")
                    download_book(book_id, title, url)
                    total += 1
                    time.sleep(random.uniform(0.3, 1.5))
                else:
                    print("‚ùå EPUB-—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            next_url = data.get("next")
            if not next_url:
                print("\nüèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞—Ç–∞–ª–æ–≥–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            break

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–Ω–∏–≥: {total}")

if __name__ == "__main__":
    main()
